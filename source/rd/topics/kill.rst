.. Generated by rtd (read the docs package in R)
   please do not edit by hand.







kill
-----------

.. :func:`kill`

Killing a pipline requires files which are created at the END of the submit_flow commands.

Description
~~~~~~~~~~~~~~~~~~

Even if you want to kill the flow, its best to let submit_flow do its job, when done simply use kill(flow_wd).
If submit_flow is interrupted, flow detail files etc are not created, thus flowr can't associate submitted jobs with flow instance.


Usage
~~~~~~~~~~~~~~~~~~

::

 
 kill(x, ...)
 
 ## method for class 'character'
 kill(x, force = FALSE, ...)
 
 ## method for class 'flow'
 kill(x, kill_cmd, jobid_col = "job_sub_id", ...)
 


Arguments
~~~~~~~~~~~~~~~~~~


x
    either path to flow [character] or fobj object of class `flow <#flow>`_

...
    not used

force
    When killing multiple flows, force is neccesary. This makes sure multiple flows are killed by accident.

kill_cmd
    The command used to kill. Default is 'bkill' (LSF). One can used qdel for 'torque', 'sge' etc.

jobid_col
    Advanced use. The column name in 'flow_details.txt' file used to fetch jobids to kill




Examples
~~~~~~~~~~~~~~~~~~

::

 ## **Not run**: 
 # 
 # ## example for terminal
 # ## flowr kill_flow x=path_to_flow_directory
 # ## In case path matches multiple folders, flowr asks before killing
 # kill(x='fastq_haplotyper*')
 #  Flowr: streamlining workflows
 #  found multiple wds:
 #  /fastq_haplotyper-MS132-20150825-16-24-04-0Lv1PbpI
 #  /fastq_haplotyper-MS132-20150825-17-47-52-5vFIkrMD
 #  Really kill all of them ? kill again with force=TRUE
 # 
 # ## submitting again with force=TRUE will kill them:
 # kill(x='fastq_haplotyper*', force = TRUE)
 # ## **End(Not run)**
 
Aliases:
kill
kill.character
kill.flow
.. Keywords:

.. Author:

.. 

